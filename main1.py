from typing import Dict, Any

from aiogram import types
from aiogram.dispatcher.filters import Text
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.exceptions import MessageNotModified, BadRequest, MessageToEditNotFound, MessageIdInvalid, MessageToDeleteNotFound
import asyncio
from class_reply import under_keyboard
import info
import functions
import energy
import regestration
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from class_PokemonBot import PokemonBot


# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
from info import bot, dp
under_keyboard_class = under_keyboard()


users_bot: dict[int, PokemonBot] = {}

class Form(StatesGroup):
    waiting_for_nickname = State()
class Form1(StatesGroup):
    waiting_for_nickname = State()  # –°—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∏–∫–Ω–µ–π–º–∞
    changing_nickname = State()

async def main():
    try:
        await functions.create_all_tables()
        try:
            await dp.start_polling()
        except Exception as e:
            print(e)
    finally:
        await bot.session.close()


async def create_bot_class_for_user(user_id):
    global users_bot
    if user_id not in users_bot:
        users_bot[user_id] = PokemonBot()


if __name__ == "__main__":
    # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞ PokemonBot
    pokemon_bot = PokemonBot()
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–æ–ª–±–µ–∫–æ–≤
    @dp.message_handler(commands=['start'])
    async def start_wrapper(message: types.Message):
        chat_id = message.chat.id
        user_id = message.from_user.id
        if await regestration.check_user_nickname(user_id):
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—ã—á–Ω—É—é –ª–æ–≥–∏–∫—É
            await message.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ! –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
            await create_bot_class_for_user(chat_id)
            await users_bot[chat_id].start(message)
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∏–∫–Ω–µ–π–º
            await message.reply("–ü–æ—Ö–æ–∂–µ, –≤—ã –∑–¥–µ—Å—å –≤–ø–µ—Ä–≤—ã–µ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
            await Form.waiting_for_nickname.set()
        
    @dp.message_handler(state=Form.waiting_for_nickname)
    async def process_nickname(message: types.Message, state: FSMContext):
        nickname = message.text
        user_id = message.from_user.id
        chat_id = message.chat.id
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–Ω—è—Ç –ª–∏ –Ω–∏–∫–Ω–µ–π–º
        if await regestration.is_nickname_taken(nickname):
            await message.reply("–≠—Ç–æ—Ç –Ω–∏–∫–Ω–µ–π–º —É–∂–µ –∑–∞–Ω—è—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π.")
        else:
            await regestration.register_new_user(user_id, nickname)
            await message.reply("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
            await state.finish()
            await create_bot_class_for_user(chat_id)
            await users_bot[chat_id].start(message)

    @dp.message_handler(commands=['üì±Pokedex'])
    async def deploy_pokedex(message: types.Message):
        chat_id = message.chat.id
        await create_bot_class_for_user(chat_id)
        await users_bot[chat_id].show_pokedex_variations(chat_id, "Select what do you want to see in Pok√©dex")


    @dp.message_handler(commands=['üèÉ‚Äç‚ôÇÔ∏èStart_Adventure'])
    async def show_go_message(message: types.Message):
        chat_id = message.chat.id
        await create_bot_class_for_user(chat_id)
        user_bot = users_bot[chat_id]
        user_bot.sleeping_task = asyncio.create_task(user_bot.start_adventure(chat_id))
    
    @dp.message_handler(commands=['üîöEnd_Adventure'])
    async def show_menu_message(message: types.Message):
        chat_id = message.chat.id
        await create_bot_class_for_user(chat_id)
        try:
            users_bot[chat_id].sleeping_task.cancel()
        except AttributeError:
            await users_bot[chat_id].end_adventure_manually(chat_id)


    @dp.message_handler(commands=['help'])
    async def help_command(message: types.Message):
        await bot.send_message(message.chat.id, info.HelpInfo, parse_mode='HTML')


    @dp.message_handler(commands=['üî¥‚ö™Get_Pokebolls'])
    async def get_pokebols_handler(message: types.Message):
        chat_id = message.chat.id
        await create_bot_class_for_user(chat_id)
        await users_bot[chat_id].get_pokebols(chat_id)


    @dp.message_handler(commands=['have_a_rest'])
    async def get_energy_handler(message: types.Message):
        chat_id = message.chat.id
        await create_bot_class_for_user(chat_id)
        await users_bot[chat_id].gain_energy(message.chat.id)


    @dp.message_handler(commands=['üéíMy_pokemons'])
    async def my_pokemons_handler(message: types.Message):
        chat_id = message.chat.id
        await create_bot_class_for_user(chat_id)
        keyboard = users_bot[chat_id].my_pokemons_keyboard()
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏—Ö –ø–æ–∫–µ–º–æ–Ω–æ–≤:", reply_markup=keyboard)
    

    @dp.message_handler(commands=['üçΩÔ∏èMeal'])
    async def items_handler(message: types.Message):
        chat_id = message.chat.id
        await create_bot_class_for_user(chat_id)
        await users_bot[chat_id].items_buttons(message.chat.id)
    
    @dp.message_handler(commands=['üìãProfile'])
    async def profile_handler(message: types.Message):
        chat_id = message.chat.id
        await create_bot_class_for_user(chat_id)
        await users_bot[chat_id].profile_button(message.chat.id)

    @dp.message_handler(commands=['rarity'])
    async def rarity_command(message: types.Message):
        await bot.send_message(message.chat.id, info.RARITY, parse_mode='HTML')

    @dp.message_handler(commands=['üìùChange_Nickname'])
    async def profile(call: types.CallbackQuery):
        markup = await under_keyboard_class.cancel_change_nickname()
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –Ω–∏–∫–Ω–µ–π–º–∞
        await bot.send_message(call.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º:", reply_markup=markup)
    
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –Ω–∏–∫–Ω–µ–π–º–∞
        await Form1.changing_nickname.set()
    
    @dp.message_handler(commands=['üè†Main_Menu'])
    async def main_menu(message: types.Message):
        markup = await under_keyboard_class.back_to_menu()
        await bot.send_message(message.chat.id, 'Going to Menu', reply_markup=markup)
    
    @dp.message_handler(Text(startswith="/"), state=Form1.changing_nickname)
    async def skip_command(message: types.Message, state: FSMContext):
        # –ú–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–ø–æ–º–Ω–∏—Ç—å, —á—Ç–æ –æ–∂–∏–¥–∞–µ—Ç—Å—è –Ω–∏–∫–Ω–µ–π–º
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º, –∞ –Ω–µ –∫–æ–º–∞–Ω–¥—É.")

    @dp.message_handler(commands=['‚ùåDiscard_Changes'], state="*")
    async def discard_changes(message: types.Message, state: FSMContext):
        markup = await under_keyboard_class.profile_menu()
        await message.reply('–ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã‚ùå', reply_markup=markup)
        await state.finish()

    @dp.message_handler(lambda message: not message.text.startswith('/'), state=Form1.changing_nickname)
    async def change_nickname(message: types.Message, state: FSMContext):
        new_nickname = message.text.strip()
        user_id = message.from_user.id

        if new_nickname.startswith('/'):
            await message.reply("–ù–∏–∫–Ω–µ–π–º –Ω–µ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å —Å–∏–º–≤–æ–ª–∞ '/'. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –Ω–∏–∫–Ω–µ–π–º.")
            return

        if await regestration.is_nickname_taken(new_nickname):
            await message.reply("–≠—Ç–æ—Ç –Ω–∏–∫–Ω–µ–π–º —É–∂–µ –∑–∞–Ω—è—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π.")
            return

        await regestration.update_nickname(user_id, new_nickname)
        markup = await under_keyboard_class.profile_menu()
        await message.reply("–í–∞—à –Ω–∏–∫–Ω–µ–π–º —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω.", reply_markup=markup)
        await state.finish()


    @dp.callback_query_handler(Text(equals='üñºÔ∏èpictures')) #üñºÔ∏è
    async def see_in_pictures(message: types.Message):
        chat_id = message.chat.id
        await create_bot_class_for_user(chat_id)
        markups = await users_bot[chat_id].command_markups('pictures')
        await bot.send_message(message.chat.id, "Choose the rarity you want to see", reply_markup=markups)

    @dp.callback_query_handler(lambda c: c.data == 'view_list')
    async def show_pokemon_list(callback_query: types.CallbackQuery):
        chat_id = callback_query.message.chat.id
        await create_bot_class_for_user(chat_id)
        message_id = callback_query.message.message_id
        await bot.delete_message(chat_id, message_id)
        await users_bot[chat_id].show_my_pokemons_variations(chat_id)
        await bot.answer_callback_query(callback_query.id)  ##?????????

    @dp.callback_query_handler(lambda c: c.data == 'view_photos')
    async def show_pokemon_photos(callback_query: types.CallbackQuery):
        chat_id = callback_query.message.chat.id
        await create_bot_class_for_user(chat_id)
        message_id = callback_query.message.message_id
        await bot.delete_message(chat_id, message_id)
        markups = await users_bot[chat_id].command_markups('pictures')
        await bot.send_message(callback_query.message.chat.id, "Choose the rarity you want to see", reply_markup=markups)
        


    @dp.callback_query_handler(Text(equals="next"))
    async def scroll_to_next(call: types.CallbackQuery):
        markup = InlineKeyboardMarkup()
        next_list = InlineKeyboardButton('Next', callback_data='next')
        markup.add(next_list)
        chat_id = call.message.chat.id
        await create_bot_class_for_user(chat_id)
        try:
            text = await users_bot[chat_id].generator.__anext__()
            await bot.edit_message_text(text, chat_id, call.message.message_id, reply_markup=markup)
        except AttributeError:
            await bot.edit_message_text('This Item is not valid anymore, \npress /üì±Pokedex to get up-to-date version',
                                        chat_id, call.message.message_id)
        except MessageNotModified:
            await users_bot[chat_id].slow_down_message(chat_id, call.message.message_id)



    @dp.callback_query_handler(Text(equals="All_pokedex"))
    async def show_allpokedex(call: types.CallbackQuery):
        chat_id = call.message.chat.id
        await create_bot_class_for_user(chat_id)
        await users_bot[chat_id].show_all_pokedex(chat_id, call.message.message_id)


    @dp.callback_query_handler(Text(equals="All_pokemons"))
    async def show_all_my_pokemons(call: types.CallbackQuery):
        chat_id = call.message.chat.id
        await create_bot_class_for_user(chat_id)
        await users_bot[chat_id].my_pokemons_all(chat_id, call.message.message_id)


    @dp.callback_query_handler(Text(endswith='_pokedex'))
    async def show_rariry_pokedex(call):
        chat_id = call.message.chat.id
        await create_bot_class_for_user(chat_id)
        markup = await users_bot[chat_id].command_markups('pokedex')
        try:
            await bot.edit_message_text(await functions.show_pokedex_rarity(chat_id, call.data[:-8]), chat_id, call.message.message_id, reply_markup=markup)
        except MessageNotModified:
            await users_bot[chat_id].slow_down_message(chat_id, call.message.message_id)

    @dp.callback_query_handler(Text(endswith='_pokemons'))
    async def show_rarity_pokemons(call: types.CallbackQuery):
        chat_id = call.message.chat.id
        await create_bot_class_for_user(chat_id)
        markup = await users_bot[chat_id].command_markups('pokemons')
        try:
            await bot.edit_message_text(await functions.show_pokemons_rarity(chat_id, call.data[:-9]), chat_id, call.message.message_id, reply_markup=markup)
        except MessageNotModified:
            await users_bot[chat_id].slow_down_message(chat_id, call.message.message_id)

    @dp.callback_query_handler(Text(endswith='_pictures'))
    async def show_rarity_pictures(call):
        chat_id = call.message.chat.id
        await create_bot_class_for_user(chat_id)
        try:
            await users_bot[chat_id].show_first_pokemon_picture(chat_id, call.message.message_id, call.data[:-9])
        except MessageToDeleteNotFound:
            pass


    @dp.callback_query_handler(Text(equals='forward'))
    async def change_pokemon_picture(call):
        chat_id = call.message.chat.id
        try:
            await users_bot[chat_id].increase_and_show_pokemon_picture(call.message.chat.id, call.message.message_id, 1)
        except MessageNotModified:
            pass
        except BadRequest:
            await users_bot[chat_id].slow_down_message(chat_id, call.message.message_id, "‚ùó‚ùó‚ùóPlease slow down, bot cannot process quick button presses‚ùó‚ùó‚ùó")

    @dp.callback_query_handler(Text(equals='back'))
    async def change_pokemon_picture(call):
        chat_id = call.message.chat.id
        try:
            await users_bot[chat_id].decrease_and_show_pokemon_picture(chat_id, call.message.message_id, 1)
        except MessageNotModified:
            pass
        except BadRequest:
            await bot.send_message(chat_id, "Please slow down, bot cannot process quick button presses")


    @dp.callback_query_handler(Text(equals='go_back'))
    async def go_to_pictures_start(call):
        chat_id = call.message.chat.id
        await create_bot_class_for_user(chat_id)
        await bot.delete_message(chat_id, call.message.message_id)
        markups = await users_bot[chat_id].command_markups('pictures')
        await bot.send_message(chat_id, "Choose the rarity you want to see", reply_markup=markups)

    @dp.callback_query_handler(Text(equals=['Go', 'keepgoing', 'skip', 'retry', 'catch']))
    async def handle_go_callback_wrapper(call: types.CallbackQuery):
        markup = types.InlineKeyboardMarkup()
        chat_id = call.message.chat.id
        await create_bot_class_for_user(chat_id)
        try:
            await bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=markup)
            await users_bot[chat_id].handle_go_callback(call)
        except MessageToEditNotFound:
            await users_bot[chat_id].slow_down_message(chat_id, call.message.message_id)
        except MessageNotModified:
            await users_bot[chat_id].slow_down_message(chat_id, call.message.message_id)
        except MessageIdInvalid:
            await users_bot[chat_id].slow_down_message(chat_id)
        except MessageToDeleteNotFound: #–∑–Ω–∞—á–∏—Ç –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å
            pass

    @dp.callback_query_handler(
        Text(equals=['check_bread', 'check_rice', 'check_ramen', 'check_spaghetti']))  # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–±—ç–∫
    async def handle_check_bread(call: types.CallbackQuery):
        chat_id = call.message.chat.id
        await create_bot_class_for_user(chat_id)
        await users_bot[chat_id].item_handler(call)  # –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ö–ª–µ–±

    @dp.callback_query_handler(lambda c: c.data == 'use_candy')
    async def use_candy(call: types.CallbackQuery):
        chat_id = call.message.chat.id
        await create_bot_class_for_user(chat_id)
        result = await users_bot[chat_id].candy_button(call)  # –í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Candy
        if result:
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π "Candy" –Ω–∞ 1 –∏–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –µ–≥–æ, –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
            users_bot[chat_id].candy_usage += 1
        
    

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("KeyboardInterrupt")
