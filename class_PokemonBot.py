import random
from datetime import datetime, timedelta
from aiogram import types
import asyncio
import functions
import energy
import candy
import info
import regestration
from info import bot, dp
from class_reply import under_keyboard
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.exceptions import MessageToEditNotFound
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

under_keyboard_class = under_keyboard()


class PokemonBot:

    def __init__(self):
        self.generation = None
        self.generator = None
        self.found_pokemon = ""
        self.rarity_pokemon_count = 1
        self.max_num_in_rarity = 0
        self.last_message_id = None
        self.sleeping_task = None
        self.candy_usage = 0  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Candy

    # async def async_init(self):
    #     await functions.create_all_tables()

    async def start(self, message):
        await functions.add_user_to_number_of_pokemons(message.chat.id)
        await functions.add_user_and_initialize_energy(message.chat.id)
        markup = await under_keyboard_class.back_to_menu()
        await bot.send_message(message.chat.id,
                       f"Hi, {message.from_user.first_name}!\nWelcome to Pok√©-Hunter. This bot allows you to search and catch Pok√©mons.\nPress (/üèÉ‚Äç‚ôÇÔ∏èStart_Adventure) to start your adventure.\nPress /help for more information.", reply_markup = markup)

    async def handle_go_callback(self, call):
        chat_id = call.message.chat.id  # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ user_id –∏ chat_id –∏–¥–µ–Ω—Ç–∏—á–Ω—ã

        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `await` –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ pokebols
        # if call.data == 'skip':
        #     now = datetime.now()
        #     if now - self.last_skip_time < timedelta(
        #             seconds=1):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 1 –Ω–∞–∂–∞—Ç–∏–µ –≤ 2 —Å–µ–∫—É–Ω–¥—ã
        #
        #         await self.slow_down(chat_id, call.message.message_id)
        #         return
        #     self.last_skip_time = now

        pokebol_count = await functions.pokebols_number(chat_id)
        energy_level = await energy.energy_number(chat_id)

        if pokebol_count > 0 and energy_level > 0:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ "Go", "Keep going", "Skip"
            if call.data in ['Go', 'keepgoing', 'skip']:
                self.found_pokemon = ""
                try:
                    await bot.delete_message(call.message.chat.id, call.message.message_id)
                    if call.data == 'skip':
                        await bot.delete_message(call.message.chat.id, call.message.message_id - 1)
                except MessageToEditNotFound as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                finally:
                    self.reset_candy_usage(chat_id)  # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –∑–¥–µ—Å—å

                if random.choice([True, False]):
                    await self.show_catch_or_skip_buttons(chat_id, pokebol_count, energy_level)
                    self.reset_candy_usage(chat_id)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Candy

                else:
                    await self.back_to_start(chat_id)

                await energy.use_energy(chat_id)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ "Catch", "Retry"
            elif call.data in ['catch', 'retry']:
                await self.rarity_catch(call)


        elif pokebol_count <= 0:
            await bot.send_message(chat_id,
                                   "–£ –≤–∞—Å –Ω–µ—Ç pokebol! –ù–∞–π–¥–∏—Ç–µ –∏–ª–∏ –∫—É–ø–∏—Ç–µ –∏—Ö, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ª–æ–≤–ª—é –ø–æ–∫–µ–º–æ–Ω–æ–≤.")
            # –Ω–∞ –±—É–¥—É—â–µ–µ: –Ω—É–∂–Ω–æ –ø—Ä–∏–¥—É–º–∞—Ç—å –∫–∞–∫–æ–µ —Ç–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        else:
            await bot.send_message(chat_id, '–í—ã —É—Å—Ç–∞–ª–∏ –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Å–≤–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ.')

    async def rarity_catch(self, call):
        chat_id = call.message.chat.id

        if self.generation is not None:
            gen = self.generation

            success_rate = info.POKEMON_CATCH_SUCCESS_RATES[gen]
            candy_used = self.candy_usage
            catch_chance = min(success_rate + 20 * candy_used,
                               100)  # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —à–∞–Ω—Å–∞ –Ω–∞ 20% –∑–∞ –∫–∞–∂–¥–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ "Candy", –Ω–æ –Ω–µ –±–æ–ª–µ–µ 100%
            print(f"Base chance: {success_rate}, Candy used: {candy_used}, New catch chance: {catch_chance}")

            success = random.choices([True, False], weights=[catch_chance, 100 - catch_chance], k=1)[0]
            if call.data == 'retry':
                await bot.delete_message(chat_id, call.message.message_id)
            if success:
                # –õ–æ–≥–∏–∫–∞ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ "Catch"
                await self.show_captured_or_retry_buttons(chat_id, call.message.message_id)
            else:
                # –õ–æ–≥–∏–∫–∞ –¥–ª—è –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ "Catch", –ø–µ—Ä–µ—Ö–æ–¥ –∫ "Retry"
                await self.show_captured_or_not_buttons(chat_id)
        else:
            # –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ gen –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –∫–∞–∫ –æ–±—ã—á–Ω–æ –∏–ª–∏ —Å–æ–æ–±—â–∏—Ç–µ –æ–± –æ—à–∏–±–∫–µ
            print(f"No gen info available for chat_id {chat_id}")

    async def start_adventure(self, chat_id):
        if self.last_message_id is not None:
            # –∑–Ω–∞—á–∏—Ç  adventure —É–∂–µ –∑–∞–ø—É—Å—Ç–∏–ª–æ—Å—å
            sent_mess = await bot.send_message(chat_id, "You are already in adventure")
            await asyncio.sleep(10)  # –∂–¥–µ–º —á—Ç–æ –± —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ "You are already in adventure"
            await bot.delete_message(chat_id, sent_mess.message_id)
        else:
            await self.gain_energy_at_start(chat_id)
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–Ω–æ–ø–∫–∏ "Go" –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–∫–µ–º–æ–Ω–∞
            markup = types.InlineKeyboardMarkup()
            button_go = types.InlineKeyboardButton('Go', callback_data='Go')
            markup.add(button_go)
            sent_message = await bot.send_message(chat_id, "Press 'Go' to start searching for a Pokemon:",
                                                  reply_markup=markup)
            self.last_message_id = [sent_message.message_id]
            try:
                # —Å–ø–∏—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ä–µ–º–µ–Ω–∏, –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –ø–æ—Ö–æ–¥ –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏—é —ç—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                # —Å–æ–Ω –º–æ–∂–µ—Ç –ø—Ä–µ—Ä–≤–∞—Ç—å—Å—è –∏ adventure –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è –ø—Ä–µ–∂–¥–µ–≤—Ä–µ–º–µ–Ω–Ω–æ –µ—Å–ª–∏ –ø–æ—Å—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–º–µ—Ç end adventure —Ä–∞–Ω—å—à–µ
                await asyncio.sleep(7200)
                await bot.send_message(chat_id=chat_id,
                                       text="You've spent 2 hours being in adventure, it's time to take a break.\nGoing to Menu")
            except asyncio.CancelledError:
                print('sleep canceled')
            finally:
                for message_id in self.last_message_id:
                    await bot.delete_message(chat_id, message_id)
                await self.end_adventure_manually(chat_id)

    async def end_adventure_manually(self, chat_id, text="Your adventure has ended\nGoing to Menu"):
        markup = await under_keyboard_class.back_to_menu()
        self.last_message_id = None
        await bot.send_message(chat_id=chat_id, text=text, reply_markup=markup)

    async def back_to_start(self, chat_id):
        # –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é –ø–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
        markup = types.InlineKeyboardMarkup()
        button_back = types.InlineKeyboardButton('Keep going', callback_data='keepgoing')
        markup.add(button_back)
        sent_message = await bot.send_message(chat_id, 'You did not find anything', reply_markup=markup)
        self.last_message_id = [sent_message.message_id]



    async def show_pokedex_variations(self, chat_id, text):
        markup = await self.command_markups('pokedex')
        await bot.send_message(chat_id, text, reply_markup=markup)

    async def show_my_pokemons_variations(self, chat_id):
        markup = await self.command_markups('pokemons')
        await bot.send_message(chat_id, "pokemons", reply_markup=markup)

    async def show_all_pokedex(self, chat_id, message_id):
        self.generator = functions.show_pokedex_all(chat_id)
        markup = types.InlineKeyboardMarkup()
        next_list = types.InlineKeyboardButton('Next', callback_data='next')
        markup.add(next_list)
        text = await self.generator.__anext__()
        await bot.edit_message_text(text, chat_id, message_id, reply_markup=markup)

    async def my_pokemons_all(self, chat_id, message_id):
        self.generator = functions.show_my_pokemons_all(chat_id)
        markup = types.InlineKeyboardMarkup()
        next_list = types.InlineKeyboardButton('Next', callback_data='next')
        markup.add(next_list)
        text = await self.generator.__anext__()
        await bot.edit_message_text(text, chat_id, message_id, reply_markup=markup)

    async def show_pictures_rarity(self, user_id: int, rarity: str):
        list_pictures_rarity = await functions.list_pictures_rarity(user_id, rarity)
        self.max_num_in_rarity = len(list_pictures_rarity)
        while True:
            counter = self.rarity_pokemon_count - 1
            pokemon_and_count = list_pictures_rarity[counter]
            yield pokemon_and_count[0], pokemon_and_count[1]
            # pokemon name          #pokemons number in user inventory

    async def show_catch_or_skip_buttons(self, chat_id, pokebol_count, energy_level):
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ "Try to Catch" –∏ "Skip" –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
        markup = types.InlineKeyboardMarkup()
        button_catch = types.InlineKeyboardButton('Try to Catch', callback_data='catch')
        button_skip = types.InlineKeyboardButton('Skip', callback_data='skip')
        candy_button = types.InlineKeyboardButton(text="Candy", callback_data="use_candy")
        markup.add(button_catch, button_skip, candy_button)

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–∫–µ–º–æ–Ω–∞ —Å –≤–µ—Å–∞–º–∏
        chosen_pokemon, gen = functions.determine_pokemon()  # –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–∫–µ–º–æ–Ω–∞ –∏ –µ–≥–æ —Ä–µ–¥–∫–æ—Å—Ç—å
        base_chance = info.POKEMON_CATCH_SUCCESS_RATES[gen]

        # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–∞—Ö –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–∫–µ–º–æ–Ω–∞
        pokemon_types = (type for type, pokemons in info.POKEMON_BY_TYPE.items() if chosen_pokemon in pokemons)
        pokemon_types_str = ', '.join(pokemon_types) if pokemon_types else 'Unknown'
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–∫–µ–º–æ–Ω–∞ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–µ–º
        pokemon_image = f'images/{chosen_pokemon.capitalize()}.webp'
        with open(pokemon_image, 'rb') as pokemon_photo:
            self.found_pokemon = chosen_pokemon
            await bot.send_document(chat_id, pokemon_photo)
            gen_info = info.GENERATIONS.get(chosen_pokemon, '')
            gen_info = f' ({gen_info})' if gen_info else ''
            sent_message = await bot.send_message(chat_id,
                                                  f"You found a {chosen_pokemon}{gen_info}!\nType: {pokemon_types_str}.\n\nIt has '{gen}' rarity.\n\nPokebols:   {pokebol_count}üî¥‚ö™\nEnergy level:   {energy_level}üîã\nCapture chance: {base_chance}%",
                                                  reply_markup=markup)
            self.generation = gen
        self.last_message_id = [sent_message.message_id, sent_message.message_id - 1]

    async def show_captured_or_retry_buttons(self, chat_id, message_id):
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "Keep going" –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞—Ö–≤–∞—Ç–∞
        # gen = self.states[chat_id].get('gen', '')
        markup = types.InlineKeyboardMarkup()
        button_go = types.InlineKeyboardButton('Keep going', callback_data='keepgoing')
        markup.add(button_go)
        await functions.capture_pokemon(chat_id, f"{self.found_pokemon}")

        sent_message = await bot.send_message(chat_id, f"You captured a {self.found_pokemon}!", reply_markup=markup)

        self.last_message_id = [sent_message.message_id]

    async def show_first_pokemon_picture(self, chat_id, message_id, rarity: str):
        self.generator = self.show_pictures_rarity(chat_id, rarity)
        self.rarity_pokemon_count = 1
        try:
            pokemon, pokemon_amount = await self.generator.__anext__()
        except IndexError:
            markup = InlineKeyboardMarkup()
            return_to_pictures = InlineKeyboardButton("‚¨ÖÔ∏èGo back", callback_data="go_back")
            markup.add(return_to_pictures)
            return await bot.edit_message_text(f"You don't have any {rarity} pokemons yet", chat_id, message_id,
                                               reply_markup=markup)
        await bot.delete_message(chat_id, message_id)
        markup = InlineKeyboardMarkup()
        back = InlineKeyboardButton("<<", callback_data="back")
        number = InlineKeyboardButton(f'{self.rarity_pokemon_count}/{self.max_num_in_rarity}', callback_data="www")
        forward = InlineKeyboardButton(">>", callback_data="forward")
        return_to_pictures = InlineKeyboardButton("‚¨ÖÔ∏èGo back", callback_data="go_back")
        markup.add(back, number, forward, return_to_pictures)
        pokemon_image = f'images/{pokemon}.webp'
        with open(pokemon_image, 'rb') as pokemon_photo:
            await bot.send_photo(chat_id, pokemon_photo, caption=f'1. {pokemon}\nYou have: {pokemon_amount}',
                                 reply_markup=markup)

    async def increase_and_show_pokemon_picture(self, chat_id, message_id, num, rarity=""):

        if self.rarity_pokemon_count >= self.max_num_in_rarity:
            self.rarity_pokemon_count = 0

        self.rarity_pokemon_count += num
        pokemon_number_in_sequence = self.rarity_pokemon_count
        pokemon, pokemon_amount = await self.generator.__anext__()
        markup = InlineKeyboardMarkup()
        back = InlineKeyboardButton("<<", callback_data="back")
        number = InlineKeyboardButton(f'{pokemon_number_in_sequence}/{self.max_num_in_rarity}', callback_data="www")
        forward = InlineKeyboardButton(">>", callback_data="forward")
        return_to_pictures = InlineKeyboardButton("‚¨ÖÔ∏èGo back", callback_data="go_back")
        markup.add(back, number, forward, return_to_pictures)
        pokemon_image = f'images/{pokemon}.webp'
        with open(pokemon_image, 'rb') as pokemon_photo:
            new_media = types.InputMediaPhoto(pokemon_photo,
                                              caption=f'{pokemon_number_in_sequence}. {pokemon}\nYou have: {pokemon_amount}')
            await bot.edit_message_media(chat_id=chat_id, message_id=message_id, media=new_media, reply_markup=markup)

    async def decrease_and_show_pokemon_picture(self, chat_id, message_id, num):
        if self.rarity_pokemon_count <= 1:
            self.rarity_pokemon_count = self.max_num_in_rarity + 1
        self.rarity_pokemon_count -= num
        pokemon_number_in_sequence = self.rarity_pokemon_count
        pokemon, pokemon_amount = await self.generator.__anext__()
        markup = InlineKeyboardMarkup()
        back = InlineKeyboardButton("<<", callback_data="back")
        number = InlineKeyboardButton(f'{self.rarity_pokemon_count}/{self.max_num_in_rarity}', callback_data="www")
        forward = InlineKeyboardButton(">>", callback_data="forward")
        return_to_pictures = InlineKeyboardButton("‚¨ÖÔ∏èGo back", callback_data="go_back")
        markup.add(back, number, forward, return_to_pictures)
        pokemon_image = f'images/{pokemon}.webp'
        with open(pokemon_image, 'rb') as pokemon_photo:
            new_media = types.InputMediaPhoto(pokemon_photo,
                                              caption=f'{pokemon_number_in_sequence}. {pokemon}\nYou have: {pokemon_amount}')
            await bot.edit_message_media(chat_id=chat_id, message_id=message_id, media=new_media, reply_markup=markup)

    async def show_captured_or_not_buttons(self, chat_id):
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "Try again" –ø–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ –∑–∞—Ö–≤–∞—Ç–∞
        markup = types.InlineKeyboardMarkup()
        button_try_again = types.InlineKeyboardButton('Try again', callback_data='retry')
        markup.add(button_try_again)
        await functions.capture_failed(chat_id)
        sent_message = await bot.send_message(chat_id, 'Bad luck', reply_markup=markup)
        self.last_message_id = [sent_message.message_id]

    async def item_handler(self, call):  # –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ö–ª–µ–±
        user_id = call.message.chat.id
        call_data = call.data
        if call_data == 'check_bread':
            has_bread = await energy.check_bread_availability(user_id)  # –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ö–ª–µ–±–∞
            if has_bread:
                await energy.use_bread(user_id)
                await call.answer("–í—ã —Å—ä–µ–ª–∏ —Ö–ª–µ–± –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ 10 —ç–Ω–µ—Ä–≥–∏–∏!", show_alert=True)
            else:
                await call.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–∞ Bread!", show_alert=True)
        elif call_data == 'check_rice':
            has_rice = await energy.check_rice_availability(user_id)
            if has_rice:
                await energy.use_rice(user_id)
                await call.answer("–í—ã —Å—ä–µ–ª–∏ —Ä–∏—Å –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ 15 —ç–Ω–µ—Ä–≥–∏–∏!", show_alert=True)
            else:
                await call.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–∞ Rice!", show_alert=True)
        elif call_data == 'check_ramen':
            has_ramen = await energy.check_ramen_availability(user_id)
            if has_ramen:
                await energy.use_ramen(user_id)
                await call.answer("–í—ã —Å—ä–µ–ª–∏ —Ä–∞–º–µ–Ω –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ 25 —ç–Ω–µ—Ä–≥–∏–∏!", show_alert=True)
            else:
                await call.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–∞ Ramen!", show_alert=True)
        elif call.data == 'check_spaghetti':
            has_spaghetti = await energy.check_spaghetti_availability(user_id)
            if has_spaghetti:
                await energy.use_spaghetti(user_id)
                await call.answer("–í—ã —Å—ä–µ–ª–∏ —Å–ø–∞–≥–µ—Ç—Ç–∏ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ 40 —ç–Ω–µ—Ä–≥–∏–∏!", show_alert=True)
            else:
                await call.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–∞ Spaghetti!", show_alert=True)

    async def items_buttons(self, chat_id):
        markup = types.InlineKeyboardMarkup()
        button_bread = types.InlineKeyboardButton('üçûBread', callback_data='check_bread')
        button_rice = types.InlineKeyboardButton('üçöRice', callback_data='check_rice')
        button_ramen = types.InlineKeyboardButton('üçúRamen', callback_data='check_ramen')
        button_spaghetti = types.InlineKeyboardButton('üçùSpaghetti', callback_data='check_spaghetti')
        markup.add(button_bread, button_rice, button_ramen, button_spaghetti)
        await bot.send_message(chat_id, 'Item bag', reply_markup=markup)
    
    async def profile_button(self, chat_id):
        nickname = await regestration.get_user_profile(chat_id)
        markup = await under_keyboard_class.profile_menu()
        profile_text = (
            f"üìãProfile:\n\n"
            f"Nickname: {nickname}\n\n"
            f"Level: ???\n\n"
            f"Captured Pokemons: ???"
        )
        await bot.send_message(chat_id, profile_text, reply_markup=markup)
    
    async def candy_button(self, call):
        user_id = call.message.chat.id
        has_candy = await candy.check_candy_availability(user_id)
        if has_candy:
            await candy.use_candy(user_id)
            self.candy_usage += 1
            await call.answer("–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ Candy! –®–∞–Ω—Å —É–≤–µ–ª–∏—á–∏–ª—Å—è –Ω–∞ 20%\n–í–Ω–∏–º–∞–Ω–∏–µ! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —à–∞–Ω—Å 100%",
                              show_alert=True)
            return True
        else:
            await call.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–∞ Candy!", show_alert=True)
            return False

    def reset_candy_usage(self, user_id):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Candy –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        self.candy_usage = 0

    async def get_pokebols(self, user_id):
        can_get_pokebols = await functions.check_pokebols_eligibility(user_id)  # –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True or False
        text = functions.time_until_next_midnight()
        if can_get_pokebols:
            await functions.add_pokebols(user_id, 50)
            await bot.send_message(user_id,
                                   f'–í—ã –ø–æ–ª—É—á–∏–ª–∏ 50 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–∫–µ–±–æ–ª–æ–≤. –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å—Ç–∞–ª–æ—Å—å {text}')
        else:
            await bot.send_message(user_id,
                                   f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã –µ—â–µ –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–∫–µ–±–æ–ª—ã. –î–æ–∂–¥–∏—Ç–µ—Å—å —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è. –û—Å—Ç–∞–ª–æ—Å—å –∂–¥–∞—Ç—å: {text}')

    async def command_markups(self, command):
        markup = types.InlineKeyboardMarkup()
        all_var = types.InlineKeyboardButton("All", callback_data=f"All_{command}")
        common = types.InlineKeyboardButton("Common", callback_data=f"Common_{command}")
        uncommon = types.InlineKeyboardButton("Uncommon", callback_data=f"Uncommon_{command}")
        rare = types.InlineKeyboardButton("Rare", callback_data=f"Rare_{command}")
        superrare = types.InlineKeyboardButton("SuperRare", callback_data=f"SuperRare_{command}")
        epic = types.InlineKeyboardButton("Epic", callback_data=f"Epic_{command}")
        legendary = types.InlineKeyboardButton("Legendary", callback_data=f"Legendary_{command}")
        markup.add(common, uncommon, rare, superrare, epic, legendary, all_var)
        return markup

    async def gain_energy(self, user_id):
        can_gain_energy = await energy.check_energy_eligibility(user_id)
        time_until_next_midnight = functions.time_until_next_midnight()
        if can_gain_energy:
            await energy.add_energy(user_id, 20)
            await bot.send_message(user_id,
                                   f'–í—ã –æ—Ç–¥–æ—Ö–Ω—É–ª–∏, –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ 20 —ç–Ω–µ—Ä–≥–∏–∏. –î–æ —Å–¥–µ–¥—É—é—â–µ–≥–æ –æ—Ç–¥—ã–∑–∞ –æ—Å—Ç–∞–ª–æ—Å—å {time_until_next_midnight}')
        else:
            await bot.send_message(user_id,
                                   f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã –µ—â–µ –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å. –î–æ–∂–¥–∏—Ç–µ—Å—å —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è. –û—Å—Ç–∞–ª–æ—Å—å –∂–¥–∞—Ç—å: {time_until_next_midnight}')

    async def gain_energy_at_start(self, user_id):
        can_gain_energy = await energy.check_last_adventure(user_id)
        time_until_next_midnight = functions.time_until_next_midnight()
        menu_markup = under_keyboard.reply_menu(self)
        if can_gain_energy:
            await energy.add_energy(user_id, 30)
            await bot.send_message(user_id,
                                   f'–í—ã –æ—Ç–¥–æ—Ö–Ω—É–ª–∏, –∏ –≤–æ—Å—Ç–æ–Ω–æ–≤–∏–ª–∏ 30 —ç–Ω–µ—Ä–≥–∏–∏. –î–æ —Å–¥–µ–¥—É—é—â–µ–≥–æ –æ—Ç–¥—ã—Ö–∞ –æ—Å—Ç–∞–ª–æ—Å—å {time_until_next_midnight}',
                                   reply_markup=menu_markup)

        else:
            await bot.send_message(user_id,
                                   f'–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç–¥—ã—Ö –±—É–¥–µ—Ç —á–µ—Ä–µ–∑: {time_until_next_midnight}',
                                   reply_markup=menu_markup)

    # async def del_last_go_message(self, message: types.Message):
    #     chat_id = message.chat.id
    #     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ chat_id
    #     if self.last_message_id:
    #         # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –º—ã —Ä–∞–±–æ—Ç–∞–µ–º —Å–æ —Å–ø–∏—Å–∫–æ–º
    #         msg_ids = self.last_message_id
    #         if not isinstance(msg_ids, list):
    #             # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å–ø–∏—Å–æ–∫, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫
    #             msg_ids = [msg_ids]
    #
    #         for msg_id in msg_ids:
    #             try:
    #                 await bot.delete_message(chat_id, msg_id)
    #             except Exception as e:
    #                 print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {msg_id}: {e}")
    #
    #         # –ü–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —É–¥–∞–ª—è–µ–º chat_id –∏–∑ —Å–ª–æ–≤–∞—Ä—è
    #         self.last_message_id = None
    #
    #     markup = await under_keyboard_class.back_to_menu()
    #     await bot.send_message(chat_id=chat_id, text='Going to Menu', reply_markup=markup)

    async def slow_down_message(self, chat_id, reply_message_id=None, text="‚ùó‚ùó‚ùóPlease Slow down‚ùó‚ùó‚ùó"):
        try:
            message = await bot.send_message(chat_id, text, reply_to_message_id=reply_message_id)
        except:
            message = await bot.send_message(chat_id, text)

        await asyncio.sleep(10)
        await bot.delete_message(chat_id, message["message_id"])

    def my_pokemons_keyboard(self):
        keyboard = InlineKeyboardMarkup(row_width=2)
        button_list = [InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫", callback_data='view_list'),
                       InlineKeyboardButton(text="–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏", callback_data='view_photos')]
        keyboard.add(*button_list)
        return keyboard

    def run(self):
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞
        dp.infinity_polling()
